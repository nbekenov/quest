Name: MainBranch
SchemaVersion: "1.0"

Triggers:
  - Type: Push
    Branches:
      - master

Actions:
  Build:
    Actions:
      SCA: # Software composition analysis
        Identifier: aws/github-actions-runner@v1
        Inputs:
          Sources:
            - WorkflowSource
        Configuration:
          Steps:
            - name: Trivy Vulnerability Scanner
              uses: aquasecurity/trivy-action@master
              with:
                scan-type: fs
                scan-ref: './src'
                ignore-unfixed: true
                format: sarif
                output: report.sarif
                security-checks: vuln,config,secret
        Outputs:
          Reports:
            SCA:
              Format: SARIFSCA
              IncludePaths:
                - report.sarif
              SuccessCriteria:
                Vulnerabilities:
                  Severity: HIGH
                  Number: 0
      bootstrap:
        Compute:
          Type: EC2
        Identifier: aws/build@v1
        Inputs:
          Sources:
            - WorkflowSource
        Environment:
          Name: dev
          Connections:
            - Role: Main-Branch-Infrastructure
              Name: "dev"
        Configuration:
          # Container:
          #   Registry: registry
          #   Image: image
          Steps:
            - Run: export TF_VERSION=1.3.7 && wget -O terraform.zip "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
            - Run: unzip terraform.zip && rm terraform.zip && mv terraform /usr/bin/terraform && chmod +x /usr/bin/terraform
            - Run: cd iac/bootstrap
            - Run: terraform fmt -check -no-color
            - Run: terraform init -no-color
            - Run: terraform validate -no-color
            - Run: terraform plan -no-color -input=false
            - Run: terraform apply -auto-approve -no-color -input=false
      build-app:
        Compute:
          Type: EC2
        Identifier: aws/build@v1
        Inputs:
          Sources:
            - WorkflowSource
          Variables:
            - Name: AWS_DEFAULT_REGION
              Value: us-east-1
            - Name: IMAGE_REPO_NAME
              Value: quest
            - Name: IMAGE_VERSION
              Value: latest
        Environment:
          Name: dev
          Connections:
            - Role: Main-Branch-Infrastructure
              Name: "dev"
        Configuration: 
          Steps:
            - Run: npm ci
            - Run: npx npm test
            - Run: npx npm run build
        Outputs:
          AutoDiscoverReports:
            Enabled: true
            ReportNamePrefix: build
            IncludePaths:
              - "**/*"
            SuccessCriteria:
              PassRate: 100
              Vulnerabilities:
                Severity: CRITICAL
          Artifacts:
            - Name: build
              Files:
                - "**/*"
  Package:
    DependsOn:
    - Build
    Actions:
      build-image:
        Compute:
          Type: EC2
        Identifier: aws/github-actions-runner@v1
        Inputs:
          Sources:
            - WorkflowSource
          Variables:
            - Name: AWS_DEFAULT_REGION
              Value: us-east-1
            - Name: IMAGE_REPO_NAME
              Value: quest
            - Name: IMAGE_VERSION
              Value: latest
        Environment:
          Name: dev
          Connections:
            - Role: Main-Branch-Infrastructure
              Name: "dev"
        Configuration: 
          Steps:
            - name: Build an image from Dockerfile
              run: |
                docker build -t quest:vulnscan .
            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: 'quest:vulnscan'
                format: sarif
                output: report.sarif
                exit-code: '1'
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'CRITICAL,HIGH'
            - name: Push image into ECR
              run: |
                AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
                echo $AWS_ACCOUNT_ID
                echo $AWS_DEFAULT_REGION
                REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
                echo "Logging in to Amazon ECR..."
                aws ecr get-login-password --region $AWS_DEFAULT_REGION  | docker login --username AWS --password-stdin $REPOSITORY_URI
                docker build -t $REPOSITORY_URI:$IMAGE_VERSION .
                docker push $REPOSITORY_URI:$IMAGE_VERSION 
        Outputs:
          Reports:
            image-vulnerability-scan:
              Format: SARIFSCA
              IncludePaths:
                - report.sarif
              SuccessCriteria:
                Vulnerabilities:
                  Severity: HIGH
                  Number: 0
          Artifacts:
            - Name: package
              Files:
                - "**/*"
  Deploy:
    DependsOn:
    - Package
    Actions:
      create-infra:
        Compute:
          Type: EC2
        Identifier: aws/build@v1
        Inputs:
          Sources:
            - WorkflowSource
        Environment:
          Name: dev
          Connections:
            - Role: Main-Branch-Infrastructure
              Name: "dev"
        Configuration:
          Steps:
            - Run: scripts/terraform_install.sh
            - Run: scripts/terraform_plan.sh iac/app_infra dev
            - Run: cd iac/app_infra && terraform apply plan.out
        Outputs:
          AutoDiscoverReports:
            Enabled: true
            ReportNamePrefix: checkov
            IncludePaths:
              - "iac/app_infra/reports/*"
            SuccessCriteria:
              PassRate: 85
              Vulnerabilities:
                Severity: CRITICAL